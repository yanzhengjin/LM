from dataclasses import dataclass, field
from typing import Optional


@dataclass
class DataTrainingArguments:
    """
    Arguments pertaining to what data we are going to input our model for training and eval.
    """

    task_name: Optional[str] = field(default="ner", metadata={"help": "The name of the task (ner, pos...)."})
        # 这是一个Python类的定义，使用了dataclasses模块来定义具有默认值和元数据的数据类。
        # 在这个类中，task_name是一个字符串类型的字段，表示任务的名称，如命名实体识别（ner）或词性标注（pos）。field函数指定了字段的默认值为"ner"，
        # 并使用metadata参数提供了帮助信息，以便其他开发人员可以更好地理解这个字段的作用。元数据可以是任何键值对，用于存储关于字段的信息，例如帮助文本、数据类型、最小值、最大值等等。
    dataset_name: Optional[str] = field(
        default=None, metadata={"help": "The name of the dataset to use (via the datasets library)."}
    )
    dataset_config_name: Optional[str] = field(
        default=None, metadata={"help": "The configuration name of the dataset to use (via the datasets library)."}
    )
    train_file: Optional[str] = field(
        default=None, metadata={"help": "The input training data file (a csv or JSON file)."}
    )
       #train_file是一个可选的字符串类型的字段，表示输入的训练数据文件，可以是CSV或JSON文件。
    validation_file: Optional[str] = field(
        default=None,
        metadata={"help": "An optional input evaluation data file to evaluate on (a csv or JSON file)."},
    )
    test_file: Optional[str] = field(
        default=None,
        metadata={"help": "An optional input test data file to predict on (a csv or JSON file)."},
    )
       #这些字段的元数据中，使用metadata参数提供了帮助信息，以便其他开发人员可以更好地理解这些字段的作用。元数据可以是任何键值对，用于存储关于字段的信息，例如帮助文本、数据类型、最小值、最大值等等。
    overwrite_cache: bool = field(
        default=False, metadata={"help": "Overwrite the cached training and evaluation sets"}
    )
    preprocessing_num_workers: Optional[int] = field(
        default=None,
        metadata={"help": "The number of processes to use for the preprocessing."},
    )
    pad_to_max_length: bool = field(
        default=True,
        metadata={
            "help": "Whether to pad all samples to model maximum sentence length. "
            "If False, will pad the samples dynamically when batching to the maximum length in the batch. More "
            "efficient on GPU but very bad for TPU."
        },
    )
        # 这是一个Python类的定义，使用了dataclasses模块来定义具有默认值和元数据的数据类。在这个类中，overwrite_cache是一个布尔类型的字段，表示是否覆盖已缓存的训练和评估集。如果为True，则在使用现有缓存之前将重新生成数据集。
        # preprocessing_num_workers是一个可选的整数类型的字段，表示用于预处理数据时要使用的进程数。如果未指定，则使用系统中可用的所有处理器。
        # pad_to_max_length是一个布尔类型的字段，表示是否将所有样本填充到模型的最大句子长度。如果为False，则在批处理时动态地将样本填充到批处理中的最大长度。
        # 这在GPU上更有效率，但在TPU上效率很低。
        # 这些字段的元数据中，使用metadata参数提供了帮助信息，以便其他开发人员可以更好地理解这些字段的作用。元数据可以是任何键值对，用于存储关于字段的信息，例如帮助文本、数据类型、最小值、最大值等等。
    max_train_samples: Optional[int] = field(
        default=None,
        metadata={
            "help": "For debugging purposes or quicker training, truncate the number of training examples to this "
            "value if set."
        },
    )
    max_val_samples: Optional[int] = field(
        default=None,
        metadata={
            "help": "For debugging purposes or quicker training, truncate the number of validation examples to this "
            "value if set."
        },
    )
    max_test_samples: Optional[int] = field(
        default=None,
        metadata={
            "help": "For debugging purposes or quicker training, truncate the number of test examples to this "
            "value if set."
        },
    )
        # 这是一个Python类的定义，使用了dataclasses模块来定义具有默认值和元数据的数据类。在这个类中，max_train_samples、max_val_samples和max_test_samples都是可选的整数类型字段，用于指定用于训练、验证和测试的最大样本数。
        # 如果设置了这些字段，则训练、验证和测试集将被截断为指定的最大样本数。这通常用于调试或快速训练的目的。
        # 这些字段的元数据中，使用metadata参数提供了帮助信息，以便其他开发人员可以更好地理解这些字段的作用。
        # 元数据可以是任何键值对，用于存储关于字段的信息，例如帮助文本、数据类型、最小值、最大值等等。
    label_all_tokens: bool = field(
        default=False,
        metadata={
            "help": "Whether to put the label for one word on all tokens of generated by that word or just on the "
            "one (in which case the other tokens will have a padding index)."
        },
    )
    return_entity_level_metrics: bool = field(
        default=False,
        metadata={"help": "Whether to return all the entity levels during evaluation or just the overall ones."},
    )
        # 这是一个Python类的定义，使用了dataclasses模块来定义具有默认值和元数据的数据类。
        # 在这个类中，label_all_tokens是一个布尔类型的字段，表示在对生成的所有令牌进行标记时，是否对由一个单词生成的所有令牌都标记，还是只对一个令牌进行标记。
        # 如果设置为True，则所有与一个单词相关的令牌都会被标记；如果设置为False，则只有一个与该单词相关的令牌被标记。
        # return_entity_level_metrics也是一个布尔类型的字段，表示在评估过程中是否返回所有实体级别的指标还是只返回总体指标。
        # 如果设置为True，则返回每个实体的指标，例如准确率、召回率和F1值。如果设置为False，则只返回总体指标。
        # 这些字段的元数据中，使用metadata参数提供了帮助信息，以便其他开发人员可以更好地理解这些字段的作用。
        # 元数据可以是任何键值对，用于存储关于字段的信息，例如帮助文本、数据类型、最小值、最大值等等。

@dataclass
class XFUNDataTrainingArguments(DataTrainingArguments):
    lang: Optional[str] = field(default="en")
    additional_langs: Optional[str] = field(default=None)
